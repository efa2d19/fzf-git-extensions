#!/usr/bin/env zsh

type 'fzf' &>/dev/null || { echo 'fzf is not installed' && exit 1 }
type 'delta' &>/dev/null || { echo 'delta is not installed' && exit 1 }

local query=''

[[ -z $@ ]] || { query="$@" }

local fzf_git_status_colorized=$(cat <<'EOF'
{
	line = $0;
	first_char = substr(line, 1, 1);
	second_char = substr(line, 2, 1);
	
	color="5";
	if (second_char == "M") color="22";
	else if (first_char == "?") color="1";
	else if (first_char == " ") color="1";
	else if (first_char == "C") color="10";
	else if (first_char == "A") color="34";
	else if (first_char == "M") color="2";
	else if (first_char == "R") color="75";
	else if (first_char == "D") color="240";
	else if (first_char == "U") color="220";
	
	file_name = (first_char == "R") ? $4 : $2;
	printf "\033[38;5;%sm%s\033[0m\n", color, file_name;
}
EOF
)

local preview=$(cat <<'EOF'
file=$(echo {} | awk '{ print $NF }');
has_diff=$(git diff "$file" | wc -l | awk '{ print $1 }');
has_staged=$(git diff --staged "$file" | wc -l | awk '{ print $1 }');

argsArr=()

if [[ $has_diff == 0 ]]; then
	[[ $has_staged != 0 ]] && { argsArr+=('--staged') } || { argsArr+=('--no-index') }
fi

git diff "${argsArr[@]}" "$file" |
delta \
	--width=$(( $(tput cols) / 10 * 7 ))
EOF
)

local lock_file='/tmp/gsti_lock'
local acquire_lock="until nice -n 10 mkdir $lock_file 2>/dev/null; do sleep 0.2; done"
local release_lock="rmdir $lock_file 2>/dev/null"

function teardown() {
	rmdir "$lock_file" 2>/dev/null
	rm -f '.git/index.lock' 2>/dev/null
}

trap 'teardown' EXIT

local reload_command="reload(${acquire_lock} && { git status -uno --short | awk '$fzf_git_status_colorized' || true } && ${release_lock})"
local execute_silent='execute-silent'
local execute='execute'

local bind_add="${execute_silent}(${acquire_lock} && { git add {} || true } && ${release_lock})+${reload_command}"
local bind_patch="${execute}(${acquire_lock} && { git add --patch {} 2>/dev/null || true } && ${release_lock})+${reload_command}"
local bind_restore="${execute_silent}(${acquire_lock} && { git restore --staged {} || true } && ${release_lock})+${reload_command}"
local bind_delete="${execute_silent}(${acquire_lock} && { git restore {} || true } && ${release_lock})+${reload_command}"
local bind_intent="${execute_silent}(${acquire_lock} && { git add -N . || true } && ${release_lock})+${reload_command}"

git status \
	-uno \
	--short |
awk "$fzf_git_status_colorized" |
fzf \
	--cycle \
	--ansi \
	--query "$query" \
	--preview "$preview" \
	--preview-window '70%' \
	--header '^A: Add | ^P: Patch | ^R: Unstage | ^D: Delete | ^N: Intent' \
	--bind "ctrl-a:${bind_add}" \
	--bind "ctrl-p:${bind_patch}" \
	--bind "ctrl-r:${bind_restore}" \
	--bind "ctrl-d:${bind_delete}" \
	--bind "ctrl-n:${bind_intent}"
