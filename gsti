#!/usr/bin/env zsh

local help

local deps=(
    'git'
    'fzf'
    'delta'
)

local name="${0:t}"
local usage=(
    'Usage:'
    "\t$name [-h|--help]"
    "\t$name <optional_query>"
)

zparseopts -D -F -- \
    {h,-help}=help ||
    { print -l "\n${(@)usage}" && exit 1 }

[[ -z $help ]] || { print -l "${(@)usage}" && exit 0}

local query=''
[[ -z $@ ]] || { query="$@" }

function check_deps() {
    [[ -n $deps ]] || { echo '[!] Incorrect env - check_deps' && exit 2 }

    local failed
    for dep in "${(@)deps}"; do
        type "$dep" &>/dev/null || { echo '[!] Missing -' "$dep" && failed=1 }
    done

    [[ -z $failed ]] || { exit 1 }
}

local lock_file='/tmp/gsti_lock'
trap "unlink $lock_file 2>/dev/null" EXIT INT

function main() {
    check_deps

    local gst_colorize=$(cat <<'EOF'
{
    staged_status = substr($0, 1, 1);
    unstaged_status = substr($0, 2, 1);
    filename = substr($0, 4)
	
    color="5";
    if (unstaged_status == "M" && staged_status != " ") color="10";
    else if (unstaged_status == "M") color="22";
    else if (staged_status == "?") color="1";
    else if (staged_status == " ") color="1";
    else if (staged_status == "C") color="7";
    else if (staged_status == "A") color="34";
    else if (staged_status == "M") color="2";
    else if (staged_status == "R") color="75";
    else if (staged_status == "D") color="240";
    else if (staged_status == "U") color="220";
	
    if (staged_status == "R") {
        last_idx = split(filename, split_filename, " -> ");
        filename = split_filename[last_idx];
    }
    printf "\033[38;5;%sm%s\033[0m\n", color, filename;
}
EOF
)

    local preview=$(cat <<'EOF'
{
    local args=()
    git diff --quiet {} && { git diff --staged --quiet {} && args+=('--no-index') || args+=('--staged'); }

    git diff "${args[@]}" {} |
    delta \
      --width="$(( $(tput cols) / 4 * 3 ))"
}
EOF
)

    local acquire_lock="exec 8>$lock_file; lockf -s 8"
    local release_lock="exec 8>&-"

    local width="$(tput cols)"
    local preview_width="$(( $width / 4 * 3 ))"
    local preview_width_folded="$(( $width / 5 ))"
    local preview_window="right:${preview_width}:border-vertical"

    local reload_command="reload(${acquire_lock} && { git status -uno --short | awk '$gst_colorize' | tr -d \\\"\' || true } && ${release_lock})"
    local bind_add="execute-silent(${acquire_lock} && { git add -- {+} || true } && ${release_lock})+${reload_command}"
    local bind_patch="execute(${acquire_lock} && { git add --patch -- {+} 2>/dev/null || true } && ${release_lock})+${reload_command}"
    local bind_restore="execute-silent(${acquire_lock} && { git restore --staged -- {+} || true } && ${release_lock})+${reload_command}"
    local bind_delete="execute-silent(${acquire_lock} && { git restore -- {+} || true } && ${release_lock})+${reload_command}"
    local bind_intent="execute-silent(${acquire_lock} && { git add -N . || true } && ${release_lock})+${reload_command}"
    local bind_fold="change-preview-window(${preview_width_folded}|${preview_width})"

    git status \
        -uno \
        --short |
    awk "$gst_colorize" |
    tr -d \"\' |
    fzf \
        --multi \
        --cycle \
        --ansi \
        --query="$query" \
        --preview="$preview" \
        --preview-window="$preview_window" \
        --header='^A: Add | ^P: Patch | ^R: Unstage | ^D: Delete | ^N: Intent' \
        --bind="ctrl-a:${bind_add}" \
        --bind="ctrl-p:${bind_patch}" \
        --bind="ctrl-r:${bind_restore}" \
        --bind="ctrl-d:${bind_delete}" \
        --bind="ctrl-n:${bind_intent}" \
        --bind="ctrl-\\:${bind_fold}"
}

main
